{"version":3,"sources":["../../src/tests/routes.test.js"],"names":["should","chai","use","chaiHttp","token","userId","newUser","email","password","username","existingUser","describe","it","done","request","post","send","end","err","res","have","status","body","be","a","property","entry","title","set","eql","get","entry1","id","put","delete","console","log"],"mappings":"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","file":"routes.test.js","sourcesContent":["/* eslint-env mocha */\r\n// I used followed the tutorials below to write my test\r\n// https://ubuverse.com/introduction-to-node-js-api-unit-testing-with-mocha-and-chai/\r\n// https://scotch.io/tutorials/test-a-node-restful-api-with-mocha-and-chai\r\n// https://blog.khophi.co/mocha-chai-chai-http-test-express-api-auth-endpoints/\r\n\r\nimport chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport jwt from 'jsonwebtoken';\r\nimport routes from '../routes/routes';\r\nimport app from '../index';\r\nimport {\r\n  createEntryTable, createUserTable, deleteEntryTable, deleteUserTable \r\n} from '../models/schema';\r\nimport entryController from '../controllers/entries';\r\nimport { db, client } from '../models/database';\r\n\r\n\r\ndeleteEntryTable();\r\ndeleteUserTable();\r\ncreateUserTable();\r\ncreateEntryTable();\r\n\r\n\r\nlet should = chai.should();\r\nchai.use(chaiHttp);\r\n\r\nlet token;\r\nlet userId;\r\n\r\nconst newUser = {\r\n  email: 'oyinye@yahoo.com',\r\n  password: 'hopelfully',\r\n  username: 'oyin'\r\n};\r\nconst existingUser = {\r\n  email: 'oyinye@yahoo.com',\r\n  password: 'hopelfully',\r\n};\r\n\r\ndescribe('mydiary API endpoint', () => {\r\n  describe('/POST users API', () => {\r\n    it('should register a user sucessfully', (done) => {\r\n      chai\r\n        .request('http://localhost:4000/api/v1')\r\n        .post('/auth/signup')\r\n        .send(newUser)\r\n        .end((err, res) => {\r\n          res.should.have.status(201);\r\n          res.body.should.be.a('object');\r\n          done();\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('/POST users API', () => {\r\n    it('should sign a user in sucessfully and generate token', (done) => {\r\n      chai\r\n        .request('http://localhost:4000/api/v1')\r\n        .post('/auth/signin')\r\n        .send(existingUser)\r\n        .end((err, res) => {\r\n          res.should.have.status(200);\r\n          res.body.should.be.a('object');\r\n          res.body.should.have.property('token');\r\n          token  = res.body.token;\r\n          done();\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('/POST entries API', () => {\r\n    it('should not POST an entry with empty fields', (done) => {\r\n      chai\r\n        .request('http://localhost:4000/api/v1')\r\n        .post('/entries')\r\n        .end((err, res) => {\r\n          res.should.have.status(400);\r\n          res.body.should.be.a('object');\r\n          done();\r\n        });\r\n    });\r\n    it('should POST an entry successfully', (done) => {\r\n      const entry = {\r\n        title: 'today',\r\n        body: 'i met a unicorn'\r\n      };\r\n      chai\r\n        .request('http://localhost:4000/api/v1')\r\n        .post('/entries')\r\n        .set('x-access-token', token)\r\n        .send(entry)\r\n        .end((err, res) => {\r\n          res.should.have.status(201);\r\n          res.body.should.be.a('object');\r\n          res.body.should.have.property('message').eql('Entry successfully added');\r\n          \r\n          done();\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('/GET entries API', () => {\r\n    it('should GET all the entries', (done) => {\r\n      chai\r\n        .request('http://localhost:4000/api/v1')\r\n        .get('/entries')\r\n        .set('x-access-token', token)\r\n        .end((err, res) => {\r\n          res.should.have.status(200);\r\n          res.body.should.be.a('object');\r\n          res.body.should.have.property('status').eql('Success');\r\n          done();\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('/GET/:id entries API', () => {\r\n    it('should GET an entry by the given id', (done) => {\r\n      const entry = {\r\n        title: 'today',\r\n        body: 'i met a unicorn'\r\n      };\r\n      chai\r\n        .request('http://localhost:4000/api/v1')\r\n        .get('/entries/')\r\n        .set('x-access-token', token)\r\n        .send(entry)\r\n        .end((err, res) => {\r\n          res.should.have.status(200);\r\n          res.body.should.be.a('object');\r\n          res.body.should.have.property('status');\r\n          done();\r\n        });\r\n    });\r\n\r\n    it('should return status 404 when entry not found', (done) => {\r\n      const entry1 = { id: 'fake', title: 'I met a lemon', body: 'he was very tart' };\r\n      chai\r\n        .request('http://localhost:4000/api/v1')\r\n        .get(`/entries/${entry1.id}`)\r\n        .set('x-access-token', token)\r\n        .end((err, res) => {\r\n          res.should.have.status(404);\r\n          done();\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('/PUT/:id entries API', () => {\r\n    it(' should Update an entry by the given id', (done) => {\r\n      const entry = {\r\n        id: 1,\r\n        title: 'today',\r\n        body: 'i met a unicorn'\r\n      };\r\n      const entry1 = {\r\n        title: 'I met a lemon',\r\n        body: 'he was very tart'\r\n      };\r\n      chai\r\n        .request('http://localhost:4000/api/v1')\r\n        .put(`/entries/${entry.id}`)\r\n        .set('x-access-token', token)\r\n        .send(entry1)\r\n        .end((err, res) => {\r\n          res.should.have.status(200);\r\n          res.body.should.be.a('object');\r\n          res.body.should.have.property('status');\r\n          res.body.should.have.property('entry');\r\n          done();\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('/DELETE/:id entries API', () => {\r\n    it('it should DELETE an entry by the given id', (done) => {\r\n      const entry = {\r\n        id: 1,\r\n        title: 'today',\r\n        body: 'i met a unicorn'\r\n      };\r\n      chai\r\n        .request('http://localhost:4000/api/v1')\r\n        .delete(`/entries/${entry.id}`)\r\n        .set('x-access-token', token)\r\n        .end((err, res) => {\r\n          if (err) {\r\n            console.log(err);\r\n          } else {\r\n            res.should.have.status(200);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('message').eql('Entry successfully deleted');\r\n            done();\r\n          }\r\n        });\r\n    });\r\n  });\r\n});"]}