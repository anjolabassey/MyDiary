{"version":3,"sources":["../../src/controllers/entries.js"],"names":["Entrycontroller","req","res","body","title","client","query","decoded","sub","err","resp","status","json","message","entry","rows","userId","rowCount","entries","id","Number","params"],"mappings":"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","file":"entries.js","sourcesContent":["import { db, client } from '../models/database';\r\nimport { createEntryTable, createUserTable } from '../models/schema';\r\nimport entryValidation from '../helpers/entryValidation';\r\n\r\ncreateUserTable();\r\ncreateEntryTable();\r\n\r\n\r\n/**\r\n * @export\r\n * @class Entrycontroller\r\n */\r\nclass Entrycontroller {\r\n/**\r\n * Posts a new entry to the database\r\n *\r\n * @param {object} req\r\n * @param {object} res\r\n *\r\n * @returns {object} return object response or error\r\n *\r\n * @memberof Entrycontroller\r\n */\r\n  addEntry(req, res) {\r\n    const { title, body } = req.body;\r\n    client.query('INSERT INTO entries (title, body, last_updated, user_id) VALUES ( $1, $2, NOW(), $3) RETURNING *', [title, body, req.body.decoded.sub], (err, resp) => {\r\n      if (err) {\r\n        return res.status(400).json({\r\n          status: 'Failed',\r\n          message: 'Entry not found'\r\n        });\r\n      } else {\r\n        return res.status(201).json({\r\n          status: 'Success',\r\n          message: 'Entry successfully added',\r\n          entry: resp.rows[0]\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n * Gets all the entries from the database\r\n * @param {object} req\r\n * @param {object} res\r\n *\r\n * @returns {object} return object response or error\r\n *\r\n * @memberof Entrycontroller\r\n */\r\n  getAllEntries(req, res) {\r\n    const userId = req.body.decoded.sub;\r\n    client.query(`SELECT * FROM entries WHERE user_id=${userId}`, (err, resp) => {\r\n      if (err) {\r\n        return res.status(404).json({\r\n          status: 'Failed',\r\n          message: err\r\n        });\r\n      } else if (resp.rowCount === 0) {\r\n        return res.status(404).json({ message: 'You have don\\'t have any entries yet' });\r\n      } else {\r\n        return res.status(200).json({\r\n          status: 'Success',\r\n          entries: resp.rows\r\n        });\r\n      }\r\n    });\r\n  }\r\n  \r\n\r\n  /**\r\n * Gets the contents of an entry with the id provided\r\n *\r\n * @param {object} req\r\n * @param {object} res\r\n *\r\n * @returns {object} return object response or error\r\n *\r\n * @memberof Entrycontroller\r\n */\r\n  getOneEntry(req, res) {\r\n    const id = Number(req.params.id);\r\n    const userId = req.body.decoded.sub;\r\n    client.query(`SELECT * FROM entries WHERE id=${id} AND user_id=${userId}`, (err, resp) => {\r\n      if (err) {\r\n        return res.status(404).json({\r\n          status: 'Failed',\r\n          message: 'Entry not found'\r\n        });\r\n      } else if (resp.rowCount === 0) {\r\n        return res.status(400).json({\r\n          status: 'Failed',\r\n          message: 'Entry does not exist'\r\n        });\r\n      } else {\r\n        return res.status(200).json({\r\n          status: 'Success',\r\n          entry: resp.rows\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n * Changes the content of an existing entry with the corresponding id\r\n *\r\n * @param {object} req\r\n * @param {object} res\r\n *\r\n * @returns {object} success object or error object\r\n *\r\n * @memberof Entrycontroller\r\n */\r\n  modifyEntry(req, res) {\r\n    const id = Number(req.params.id);\r\n    const { title, body } = req.body;\r\n    const userId = req.body.decoded.sub;\r\n    client.query(`UPDATE entries SET title = $1, body = $2, last_updated = NOW() WHERE id = ${id} AND user_id=${userId} RETURNING *`, [title, body], (err, resp) => {\r\n      if (err) {\r\n        return res.status(400).json({\r\n          status: 'Failed',\r\n          message: 'Entry does not exist'\r\n        });\r\n      } else if (resp.rowCount === 0) {\r\n        return res.status(404).json({\r\n          status: 'Failed',\r\n          message: 'Entry not found'\r\n        });\r\n      } else {\r\n        return res.status(200).json({\r\n          status: 'Success',\r\n          message: 'Entry successfully updated',\r\n          entry: resp.rows[0]\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n * Deletes the entry with corresponding id\r\n *\r\n * @param {object} req\r\n * @param {object} res\r\n *\r\n * @returns {object} success object or error object\r\n *\r\n * @memberof Entrycontroller\r\n */\r\n  deleteEntry(req, res) {\r\n    const id = Number(req.params.id);\r\n    const userId = req.body.decoded.sub;\r\n    client.query(`DELETE FROM entries WHERE id=${id} AND user_id = ${userId}`, (err, resp) => {\r\n      if (err) {\r\n        return res.status(400).json({\r\n          status: 'Failed',\r\n          message: 'Entry does not exist'\r\n        });\r\n      } else if (resp.rowCount === 0) {\r\n        return res.status(404).json({\r\n          status: 'Failed',\r\n          message: 'Entry not found'\r\n        });\r\n      } else {\r\n        return res.json({\r\n          status: 'Success',\r\n          message: 'Entry successfully deleted'\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default new Entrycontroller();"]}