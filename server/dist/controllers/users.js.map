{"version":3,"sources":["../../src/controllers/users.js"],"names":["newToken","user","jwt","sign","iss","sub","rows","user_id","iat","Date","getTime","exp","Math","floor","now","process","env","SECRET_KEY","Usercontroller","req","res","body","email","username","password","hashed","bcrypt","hashSync","client","query","err","resp","status","json","message","rowCount","compareSync","token","messsage"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,WAAW,SAAXA,QAAW,CAACC,IAAD,EAAU;AACzB,SAAOC,uBAAIC,IAAJ,CAAS;AACdC,SAAK,SADS;AAEdC,SAAKJ,KAAKK,IAAL,CAAU,CAAV,EAAaC,OAFJ;AAGdC,SAAK,IAAIC,IAAJ,GAAWC,OAAX,EAHS;AAIdC,SAAKC,KAAKC,KAAL,CAAWJ,KAAKK,GAAL,KAAa,IAAb,GAAqB,KAAK,EAArC;AAJS,GAAT,EAKJC,QAAQC,GAAR,CAAYC,UALR,CAAP;AAMD,CAPD;;AASA;;;;;IAIMC,c;;;;;;;;AACJ;;;;;;;;;2BASOC,G,EAAKC,G,EAAK;AAAA,sBACuBD,IAAIE,IAD3B;AAAA,UACPC,KADO,aACPA,KADO;AAAA,UACAC,QADA,aACAA,QADA;AAAA,UACUC,QADV,aACUA,QADV;;AAEf,UAAMC,SAASC,iBAAOC,QAAP,CAAgBH,QAAhB,EAA0B,EAA1B,CAAf;AACAI,uBAAOC,KAAP,CAAa,gFAAb,EAA+F,CAACP,KAAD,EAAQC,QAAR,EAAkBE,MAAlB,CAA/F,EAA0H,UAACK,GAAD,EAAMC,IAAN,EAAe;AACvI,YAAID,GAAJ,EAAS;AACP,iBAAOV,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,oBAAQ,QADkB;AAE1BE,qBAAS;AAFiB,WAArB,CAAP;AAID,SALD,MAKO;AACL,iBAAOd,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,oBAAQ,SADkB;AAE1B/B,kBAAM8B,KAAKzB,IAAL,CAAU,CAAV,EAAagB;AAFO,WAArB,CAAP;AAID;AACF,OAZD;AAaD;;AAGD;;;;;;;;;;;;;2BAUOH,G,EAAKC,G,EAAK;AAAA,uBACaD,IAAIE,IADjB;AAAA,UACPC,KADO,cACPA,KADO;AAAA,UACAE,QADA,cACAA,QADA;;AAEfI,uBAAOC,KAAP,yCAAkDP,KAAlD,SAA4D,UAACQ,GAAD,EAAMC,IAAN,EAAe;AACzE,YAAID,GAAJ,EAAS;AACP,iBAAOV,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,oBAAQ,QADkB;AAE1BE,qBAAS;AAFiB,WAArB,CAAP;AAID,SALD,MAKO,IAAIH,KAAKI,QAAL,KAAkB,CAAtB,EAAyB;AAC9B,iBAAOf,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,oBAAQ,QADkB;AAE1BE,qBAAS;AAFiB,WAArB,CAAP;AAID,SALM,MAKA;AACL,cAAIR,iBAAOU,WAAP,CAAmBZ,QAAnB,EAA6BO,KAAKzB,IAAL,CAAU,CAAV,EAAakB,QAA1C,CAAJ,EAAyD;AACvD,mBAAOJ,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,sBAAQ,SADkB;AAE1BE,uBAAYH,KAAKzB,IAAL,CAAU,CAAV,EAAagB,KAAzB,kBAF0B;AAG1Be,qBAAOrC,SAAS+B,IAAT;AAHmB,aAArB,CAAP;AAKD,WAND,MAMO;AACL,mBAAOX,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,sBAAQ,QADkB;AAE1BM,wBAAU;AAFgB,aAArB,CAAP;AAID;AACF;AACF,OAzBD;AA0BD;;;;;;kBAGY,IAAIpB,cAAJ,E","file":"users.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport { db, client } from '../models/database';\r\n\r\nconst newToken = (user) => {\r\n  return jwt.sign({\r\n    iss: 'MyDiary',\r\n    sub: user.rows[0].user_id,\r\n    iat: new Date().getTime(),\r\n    exp: Math.floor(Date.now() / 1000 + (60 * 60))\r\n  }, process.env.SECRET_KEY);\r\n};\r\n\r\n/**\r\n *\r\n * @class Usercontroller\r\n */\r\nclass Usercontroller {\r\n  /**\r\n   * Registers the user to the app\r\n   *\r\n   * @param {object} req\r\n   * @param {object} res\r\n   *\r\n   * @returns {object} success object or error object\r\n   * @memberof Usercontroller\r\n   */\r\n  signup(req, res) {\r\n    const { email, username, password } = req.body;\r\n    const hashed = bcrypt.hashSync(password, 10);\r\n    client.query('INSERT INTO users (email, username, password) VALUES ( $1, $2, $3) RETURNING *', [email, username, hashed], (err, resp) => {\r\n      if (err) {\r\n        return res.status(409).json({\r\n          status: 'Failed',\r\n          message: 'This email address already exists'\r\n        });\r\n      } else {\r\n        return res.status(201).json({\r\n          status: 'Success',\r\n          user: resp.rows[0].email\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n * Signs the user into the app\r\n *\r\n * @param {object} req\r\n * @param {object} res\r\n *\r\n * @returns {object} success object or error object\r\n *\r\n * @memberof Usercontroller\r\n */\r\n  signin(req, res) {\r\n    const { email, password } = req.body;\r\n    client.query(`SELECT * FROM users WHERE email ='${email}'`, (err, resp) => {\r\n      if (err) {\r\n        return res.status(400).json({\r\n          status: 'Failed',\r\n          message: 'Wrong email or password, please try again' \r\n        });\r\n      } else if (resp.rowCount === 0) {\r\n        return res.status(404).json({\r\n          status: 'Failed',\r\n          message: 'This email address does not have an account'\r\n        });\r\n      } else {\r\n        if (bcrypt.compareSync(password, resp.rows[0].password)) {\r\n          return res.status(200).json({\r\n            status: 'Success',\r\n            message: `${resp.rows[0].email} is signed in`,\r\n            token: newToken(resp)\r\n          });\r\n        } else {\r\n          return res.status(400).json({\r\n            status: 'Failed',\r\n            messsage: 'Incorrect password'\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default new Usercontroller();"]}